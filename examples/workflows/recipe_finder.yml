# AgentFlow Recipe Finder Workflow - Configuration-First
# Based on PocketFlow cookbook/pocketflow-async-basic example
name: "Recipe Finder Workflow"
description: "Find and suggest recipes based on user ingredient, with approval loop"

# Input parameters for the workflow
inputs:
  ingredient:
    type: string
    required: true
    description: "Main ingredient to find recipes for"
    default: "chicken"
  approval_rate:
    type: number
    required: false
    description: "Simulated user approval rate (0.0-1.0)"
    default: 0.6
  max_retries:
    type: number
    required: false
    description: "Maximum number of recipe suggestions before giving up"
    default: 4

# Sequential workflow with conditional loops
workflow:
  # Step 1: Fetch recipes from mock API
  - name: fetch_recipes
    type: llm
    model: "step-2-mini"
    prompt: |
      You are a recipe API service. Generate a JSON list of 5 different recipes using {{ ingredient }} as the main ingredient.
      
      Format your response as a JSON array of recipe names only, like:
      ["Recipe Name 1", "Recipe Name 2", "Recipe Name 3", "Recipe Name 4", "Recipe Name 5"]
      
      Make each recipe distinct and appetizing. Include various cooking methods like grilled, baked, stir-fried, roasted, and in curry or soup form.
      
      Ingredient: {{ ingredient }}
    system: "You are a helpful recipe API that returns JSON arrays of recipe names. Always respond with valid JSON only."
    temperature: 0.8
    max_tokens: 200
    outputs:
      recipes: response  # Store the recipe list

  # Step 2: Suggest best recipe using LLM
  - name: suggest_recipe
    type: llm
    model: "step-2-mini"
    prompt: |
      From this list of {{ ingredient }} recipes, choose the most appealing one and return ONLY the recipe name:
      
      {{ recipes }}
      
      Previous rejected recipes: {{ attempted_recipes }}
      
      Choose a recipe that hasn't been rejected before. If all have been tried, pick any one.
      Return only the recipe name, nothing else.
    system: "You are a helpful chef assistant. Return only the recipe name, no additional text or formatting."
    temperature: 0.7
    max_tokens: 50
    outputs:
      suggested_recipe: response  # Store the suggested recipe

  # Step 3: Simulate user approval decision
  - name: get_approval
    type: llm
    model: "step-2-mini"
    prompt: |
      A user is being asked to approve this recipe: "{{ suggested_recipe }}"
      
      Based on the approval rate of {{ approval_rate }}, simulate whether the user would approve this recipe.
      
      Consider:
      - Approval rate: {{ approval_rate }} (0.0 = never approve, 1.0 = always approve)
      - Recipe appeal and common preferences
      - Whether it's a repeat suggestion
      
      Respond with exactly "APPROVED" or "REJECTED" - nothing else.
    system: "You are simulating user preferences. Respond with exactly 'APPROVED' or 'REJECTED' based on the approval rate and recipe appeal."
    temperature: 0.3
    max_tokens: 10
    outputs:
      approval_decision: response  # Store approval decision

  # Step 4: Handle retry logic
  - name: check_retry
    type: llm
    model: "step-2-mini"
    prompt: |
      Current approval decision: {{ approval_decision }}
      Current attempt count: {{ attempt_count }}
      Maximum retries allowed: {{ max_retries }}
      
      If the decision is "APPROVED", respond with "WORKFLOW_COMPLETE".
      If the decision is "REJECTED" and attempts < max_retries, respond with "RETRY".
      If the decision is "REJECTED" and attempts >= max_retries, respond with "MAX_RETRIES_REACHED".
      
      Respond with exactly one of: WORKFLOW_COMPLETE, RETRY, or MAX_RETRIES_REACHED
    system: "You are a workflow control system. Respond with exactly one of the three specified control words."
    temperature: 0.0
    max_tokens: 10
    outputs:
      next_action: response  # Store the next workflow action

# Final outputs
outputs:
  final_recipe:
    from: suggest_recipe.response
    description: "The final approved recipe"
  
  approval_status:
    from: get_approval.response
    description: "Whether the recipe was approved or rejected"
  
  workflow_result:
    from: check_retry.response
    description: "Final workflow outcome (WORKFLOW_COMPLETE, RETRY, or MAX_RETRIES_REACHED)"
  
  ingredient_used:
    from: fetch_recipes.ingredient
    description: "The ingredient that was used for recipe search"