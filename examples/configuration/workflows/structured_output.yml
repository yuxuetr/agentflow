# Structured Output - Resume Parser Workflow
name: "Resume Structured Data Parser"
version: "1.0.0"
description: "Extract structured data from resumes with target skill matching using OpenAI models"
author: "AgentFlow Team"

metadata:
  created: "2024-01-15T00:00:00Z"
  tags: ["openai", "structured-output", "resume-parsing", "yaml"]
  category: "data-extraction"

config:
  timeout: "10m"
  max_retries: 3
  output_format: "yaml"
  log_level: "info"

inputs:
  resume_text:
    type: "string"
    required: true
    description: "The full text content of the resume to parse"
    example: "John Smith\nEmail: john@example.com\nExperience:\n- Software Engineer at TechCorp\n- Project Manager at StartupInc"
  
  target_skills:
    type: "array"
    required: false
    default: ["Team leadership & management", "CRM software", "Project management", "Public speaking", "Microsoft Office", "Python", "Data Analysis"]
    description: "List of target skills to identify in the resume"
  
  model:
    type: "string"
    required: false
    default: "gpt-4o"
    enum: ["gpt-4o", "gpt-4", "gpt-3.5-turbo", "gpt-4o-mini"]
    description: "OpenAI model to use for parsing"

  temperature:
    type: "number"
    required: false
    default: 0.1
    description: "Temperature for structured output (low for consistency)"

environment:
  OPENAI_API_KEY: "required"

workflow:
  type: "sequential"
  nodes:
    - name: "prepare_skill_list"
      type: "template"
      description: "Format target skills with indexes for the prompt"
      config:
        template: |
          {% for skill in inputs.target_skills %}{{ loop.index0 }}: {{ skill }}
          {% endfor %}
      outputs:
        formatted_skills: "$.rendered"

    - name: "extract_structured_data"
      type: "llm"
      description: "Extract structured data from resume using OpenAI"
      config:
        model: "{{ inputs.model }}"
        temperature: "{{ inputs.temperature }}"
        max_tokens: 2000
        system: "You are an expert resume parser. Extract structured information accurately and format it as requested."
        prompt: |
          Analyze the resume below. Output ONLY the requested information in YAML format.

          **Resume:**
          ```
          {{ inputs.resume_text }}
          ```

          **Target Skills (use these indexes):**
          ```
          {{ prepare_skill_list.formatted_skills }}
          ```

          **YAML Output Requirements:**
          - Extract `name` (string).
          - Extract `email` (string).
          - Extract `experience` (list of objects with `title` and `company`).
          - Extract `skill_indexes` (list of integers found from the Target Skills list).
          - **Add a YAML comment (`#`) explaining the source BEFORE `name`, `email`, `experience`, each item in `experience`, and `skill_indexes`.**

          **Example Format:**
          ```yaml
          # Found name at top
          name: Jane Doe
          # Found email in contact info
          email: jane@example.com
          # Experience section analysis
          experience:
            # First job listed
            - title: Manager
              company: Corp A
            # Second job listed
            - title: Assistant
              company: Corp B
          # Skills identified from the target list based on resume content
          skill_indexes:
            # Found 0 at top  
            - 0
            # Found 2 in experience
            - 2
          ```

          Generate the YAML output now:
        timeout: "5m"
      outputs:
        raw_response: "$.response"

    - name: "parse_yaml_output"
      type: "template"
      description: "Extract and parse YAML from the LLM response"
      config:
        template: |
          {% set yaml_start = extract_structured_data.raw_response.find('```yaml') %}
          {% if yaml_start != -1 %}
            {% set yaml_content = extract_structured_data.raw_response[yaml_start + 7:] %}
            {% set yaml_end = yaml_content.find('```') %}
            {% if yaml_end != -1 %}
              {% set yaml_data = yaml_content[:yaml_end].strip() %}
              {{ yaml_data }}
            {% else %}
              {{ yaml_content.strip() }}
            {% endif %}
          {% else %}
            {{ extract_structured_data.raw_response.strip() }}
          {% endif %}
      outputs:
        yaml_content: "$.rendered"

    - name: "validate_structure"
      type: "template"
      description: "Validate the extracted structured data"
      config:
        template: |
          {% set data = parse_yaml_output.yaml_content | from_yaml %}
          {% if data.name and data.email and data.experience and data.skill_indexes is defined %}
            {
              "valid": true,
              "name": "{{ data.name }}",
              "email": "{{ data.email }}",
              "experience_count": {{ data.experience | length }},
              "skill_count": {{ data.skill_indexes | length if data.skill_indexes else 0 }},
              "found_skills": [
                {% for index in data.skill_indexes %}
                  {% if index < inputs.target_skills | length %}
                    "{{ inputs.target_skills[index] }}"{% if not loop.last %},{% endif %}
                  {% endif %}
                {% endfor %}
              ]
            }
          {% else %}
            {
              "valid": false,
              "error": "Missing required fields in parsed data"
            }
          {% endif %}
      outputs:
        validation_result: "$.rendered"

outputs:
  structured_data:
    source: "{{ parse_yaml_output.yaml_content }}"
    format: "yaml"
    file: "output/structured_resume.yml"
  
  validation_report:
    source: "{{ validate_structure.validation_result | fromjson }}"
    format: "json"
    file: "output/validation_report.json"
  
  extracted_skills:
    source: "{{ validate_structure.validation_result | fromjson | json_query('found_skills') }}"
    format: "json"
    file: "output/extracted_skills.json"
  
  execution_report:
    source: "$"
    format: "json"
    file: "output/execution_report.json"
    include:
      - execution_time
      - model_used
      - validation_status
      - skill_extraction_count